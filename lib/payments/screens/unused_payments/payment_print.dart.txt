import 'dart:io';

import 'package:tradelait/res/cm_res/custom_colors.dart';
import 'package:esc_pos_bluetooth/esc_pos_bluetooth.dart';
import 'package:esc_pos_utils/esc_pos_utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bluetooth_basic/flutter_bluetooth_basic.dart';

class PaymentPrint extends StatefulWidget {
  final String amount;
  final String balance;
  final String date;
  final String purpose;
  final String method;
  final String paymentUid;
  final String payerUid;
  final String payerFirstName;
  final String payerLastName;

  const PaymentPrint(
      {Key? key,
      required this.amount,
      required this.balance,
      required this.date,
      required this.purpose,
      required this.method,
      required this.paymentUid,
      required this.payerUid,
      required this.payerFirstName,
      required this.payerLastName})
      : super(key: key);

  //final List<String> items;

  @override
  _PaymentPrintState createState() => _PaymentPrintState();
}

class _PaymentPrintState extends State<PaymentPrint> {
  PrinterBluetoothManager _printerManager = PrinterBluetoothManager();
  List<PrinterBluetooth?> _devices = [];
  late String _devicesMsg;
  BluetoothManager bluetoothManager = BluetoothManager.instance;

  // to be sure bluetooth is switched on before scanning for available devices
  @override
  void initState() {
    if (appData.isIOS) {
      initPrinter();
    } else {
      bluetoothManager.state.listen((val) {
        print("state = $val");
        if (!mounted) return;
        if (val == 12) {
          print('on');
          initPrinter();
        } else if (val == 10) {
          print('off');
          setState(() {
            _devicesMsg = 'Please enable bluetooth to print';
          });
        }
        print('state is $val');
      });
    }
    super.initState();
  }

  // scan for devices by using the initPrinter function
  void initPrinter() {
    print('init printer');

    _printerManager.startScan(Duration(seconds: 2));
    _printerManager.scanResults.listen((event) {
      if (!mounted) return;
      setState(() => _devices = event);

      if (_devices.isEmpty)
        setState(() {
          _devicesMsg = 'No devices';
        });
    });
  }

  // the function to print
  Future<void> _startPrint(PrinterBluetooth printer) async {
    _printerManager.selectPrinter(printer);
    final myTicket = await _ticket(PaperSize.mm58);
    final result = await _printerManager.printTicket(myTicket);
    print(result);
  }

  //Future<Ticket> _ticket(PaperSize paper) async {
  //final ticket = Ticket(paper);
  Future _ticket(PaperSize paper) async {
    final Ticket ticket = Ticket(paper);
    ticket.text(widget.amount);
    ticket.text(widget.balance);
    ticket.text(widget.date);
    ticket.text(widget.purpose);
    ticket.text(widget.method);
    ticket.text(widget.payerFirstName, widget.payerLastName);

    ticket.cut();
    return ticket;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Printer page"),
      ),
      backgroundColor: Palette.firebaseAmber,
      body: Container(
        //MyProgressIndicator(
        //inAsyncCall: showSpinner,
        child: _devices.isNotEmpty
            ? ListView.builder(
                itemBuilder: (context, position) => ListTile(
                  onTap: () {
                    _startPrint(_devices[position]!);
                  },
                  leading: Icon(Icons.print),
                  title: Text(_devices[position]!.name!),
                  subtitle: Text(_devices[position]!.address!),
                ),
                itemCount: _devices.length,
              )
            : Center(
                child: Text(
                  _devicesMsg ?? 'Ops something went wrong!',
                  style: TextStyle(fontSize: 24),
                ),
              ),
      ),
    );
  }
}
